{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"str",
				"stream()	std::ostream &"
			],
			[
				"m_",
				"m_ostream	std::ostream *"
			],
			[
				"s",
				"stream(std::ostream &ostream)	void"
			],
			[
				"GLFWmon",
				"glfwGetPrimaryMonitor()	GLFWmonitor *"
			],
			[
				"CXX",
				"CXXFLAGS"
			],
			[
				"n_grd",
				"n_grd_y"
			],
			[
				"n",
				"n_pts"
			],
			[
				"in",
				"instruction_pointer"
			],
			[
				"ins",
				"instruction_pointer"
			],
			[
				"stack",
				"stack_pointer"
			],
			[
				"file",
				"file_contents	std::string"
			],
			[
				"isPal",
				"isPalindrome"
			],
			[
				"isP",
				"isPalindrome''"
			],
			[
				"isPalin",
				"isPalindrome'"
			],
			[
				"divi",
				"divideIntsFloor"
			],
			[
				"p",
				"p	Vector"
			],
			[
				"v",
				"v	Vector"
			],
			[
				"ImIm",
				"ImImpl_fontTex	sf::Texture"
			],
			[
				"win",
				"win_size	const sf::Vector2i"
			],
			[
				"vtx_",
				"vtx_buffer	const sf::Vertex *"
			],
			[
				"cmd_",
				"cmd_lists_count	int"
			],
			[
				"GL_SCISS",
				"GL_SCISSOR_TEST	macro"
			],
			[
				"ImDra",
				"ImDrawVert	struct"
			],
			[
				"TriangleS",
				"TrianglesStrip	sf::PrimitiveType"
			],
			[
				"t",
				"texCoords	Vector2f"
			],
			[
				"OneMinu",
				"OneMinusSrcAlpha	sf::BlendMode::Factor"
			],
			[
				"Blend",
				"BlendMode	struct"
			],
			[
				"load",
				"loadFromMemory(const void *data, std::size_t size)	bool"
			],
			[
				"Vertex",
				"VertexArray	class"
			],
			[
				"get",
				"GetItemWidth()	float"
			],
			[
				"Push",
				"PushItemWidth(float item_width)	void"
			],
			[
				"Tri",
				"TrianglesStrip	sf::PrimitiveType"
			],
			[
				"max",
				"max_constraint_length	PrecisionType"
			],
			[
				"con",
				"constraint_length	PrecisionType"
			],
			[
				"Wi",
				"SetWindowFontScale(float scale)	void"
			],
			[
				"pop",
				"PopItemWidth()	void"
			],
			[
				"Pop",
				"PopItemWidth()	void"
			],
			[
				"gr",
				"grvt_x	PrecisionType"
			],
			[
				"slider",
				"SliderFloat2(const char *label, float *v, float v_min, float v_max)	bool"
			],
			[
				"grvt",
				"grvt_x	PrecisionType"
			],
			[
				"Init",
				"InitImGui()	void"
			],
			[
				"as",
				"asSeconds() const	float"
			],
			[
				"key",
				"KeysDown	bool [512]"
			],
			[
				"Mouse",
				"MouseWheelMoved	sf::Event::EventType"
			],
			[
				"Back",
				"BackSpace	sf::Keyboard::Key"
			],
			[
				"cnstrn",
				"constraint_resistance	const PrecisionType"
			],
			[
				"ms_grb",
				"ms_grb_whn_stpd	const bool"
			],
			[
				"mos",
				"mouseMove	sf::Event::MouseMoveEvent"
			],
			[
				"M",
				"MouseButtonPressed	sf::Event::EventType"
			],
			[
				"cloth",
				"cloth_multithreaded"
			],
			[
				"grd",
				"grd_sz_y	const int"
			],
			[
				"lin",
				"line_color	sf::Color"
			],
			[
				"const",
				"constraints	std::vector<Constraint *>"
			],
			[
				"set",
				"Window::setTitle(const sf::String &title)	void"
			],
			[
				"setV",
				"RenderTarget::setView(const sf::View &view)	void"
			],
			[
				"parti",
				"partition_size	float"
			],
			[
				"templa",
				"template_folder	statement"
			],
			[
				"V",
				"Vector2f	"
			],
			[
				"apply",
				"apply_world_limits(std::shared_ptr<Entity> &a)	bool"
			],
			[
				"coll",
				"collisions	bool"
			],
			[
				"use_",
				"use_spatial_partitioning	bool"
			],
			[
				"se",
				"set_world_limits(const wind::AABB &limits)	void"
			],
			[
				"get_",
				"get_entity_vector() const	const std::vector<std::vector<std::vector<std::shared_ptr<Entity> > > > &"
			],
			[
				"m_ene",
				"m_entities_outside	std::vector<std::shared_ptr<Entity> >"
			],
			[
				"m_ent",
				"m_entities	std::vector<std::shared_ptr<Entity> >"
			],
			[
				"entity",
				"entity_partition_container	wind::QuadTreeEntityPartitionData *"
			],
			[
				"Grid",
				"GridEntityPartitionData	class"
			],
			[
				"Entity",
				"EntityPartitionData	class"
			],
			[
				"Quad",
				"QuadTreeEntityPartitionData	class"
			],
			[
				"use",
				"use_minimum_translation_on_collision	bool"
			],
			[
				"m_entiti",
				"m_entities_outside	std::vector<std::shared_ptr<Entity> >"
			],
			[
				"setOu",
				"Shape::setOutlineThickness(float thickness)	void"
			],
			[
				"m_en",
				"m_entities_all	std::vector<std::shared_ptr<Entity> >"
			],
			[
				"m_enti",
				"m_entities_outside	std::vector<std::shared_ptr<Entity> >"
			],
			[
				"ptr_cas",
				"static_pointer_cast<typename _Tp>(const shared_ptr<_Tp1> &__r)	shared_ptr<_Tp>"
			],
			[
				"d",
				"d_vel	Vector2f"
			],
			[
				"Deri",
				"Derivative()	constructor"
			],
			[
				"qu",
				"use_quadtree	bool"
			],
			[
				"get_en",
				"get_entities_recursive(std::vector<std::shared_ptr<Entity> > &entities) const	void"
			],
			[
				"setOutline",
				"Shape::setOutlineColor(const sf::Color &color)	void"
			],
			[
				"m",
				"m_bounds	wind::AABB"
			],
			[
				"m_cache",
				"m_cache_AABB	wind::AABB"
			],
			[
				"m_cache_AA",
				"m_cache_pos_AABB	wind::AABB"
			],
			[
				"id",
				"get_id()	unsigned int"
			],
			[
				"appl",
				"apply_collisions(std::shared_ptr<Entity> &a, std::shared_ptr<Entity> &b)	void"
			],
			[
				"quad",
				"m_quadtree	std::shared_ptr<QuadTree>"
			],
			[
				"apply_",
				"apply_collisions()	void"
			],
			[
				"quadtree",
				"use_quadtree	bool"
			],
			[
				"re",
				"retrieve(std::vector<std::shared_ptr<Entity> > &match, const wind::AABB &rect)	void"
			],
			[
				"sub_",
				"sub_width	int"
			],
			[
				"appli",
				"apply_collisions(std::shared_ptr<Entity> a, std::shared_ptr<Entity> b)	void"
			],
			[
				"sum",
				"sum_rad_pow2	float"
			],
			[
				"tmp_len",
				"tmp_len_pow2	float"
			],
			[
				"tmp_l",
				"tmp_len_pow2	float"
			],
			[
				"old_velo",
				"old_velocity_col	Vector2f"
			],
			[
				"entity_shape",
				"entity_col_shape	std::shared_ptr<wind::Shape> &"
			],
			[
				"g",
				"get_body()	std::shared_ptr<Body>"
			],
			[
				"particle",
				"particle_body	std::shared_ptr<wind::Body>"
			],
			[
				"Cir",
				"CircleShape	class"
			],
			[
				"finl",
				"__FINITE_MATH_ONLY__	macro"
			],
			[
				"gra",
				"gravity_exert	bool"
			],
			[
				"Key",
				"KeyPressed	sf::Event::EventType"
			],
			[
				"link",
				"link_directories"
			],
			[
				"CMAKE_DIR",
				"CMAKE_BINARY_DIR"
			],
			[
				"EXAMPLE",
				"EXAMPLE_NAME"
			],
			[
				"link_",
				"link_libraries"
			],
			[
				"gravi",
				"gravity_exert	bool"
			],
			[
				"gravity",
				"gravity_exert	bool"
			],
			[
				"enti",
				"entity_fund_itr	unsigned int"
			],
			[
				"signed",
				"signed_rand	auto"
			],
			[
				"trans",
				"translation"
			],
			[
				"Object",
				"ObjectActivity"
			],
			[
				"Obj",
				"ObjectClipboardManager"
			],
			[
				"Objec",
				"ObjectClipboardManager"
			],
			[
				"ObjectClip",
				"ObjectClipboardManager"
			],
			[
				"Method",
				"MethodGetSystemService"
			],
			[
				"String",
				"StringClipboardText"
			],
			[
				"Obje",
				"ObjectContext	jobject"
			],
			[
				"dele",
				"DeleteLocalRef(jobject localRef)	void"
			],
			[
				"MethodG",
				"MethodGetSystemService	jmethodID"
			],
			[
				"De",
				"DetachCurrentThread()	jint"
			],
			[
				"to",
				"toAnsiString() const	std::string"
			],
			[
				"m_atom",
				"m_atomNULL	Atom"
			],
			[
				"null",
				"nullAtomReply	xcb_intern_atom_reply_t*"
			],
			[
				"saveTa",
				"saveTargetsAtomReply	atomPairAtomReply &&"
			],
			[
				"saveTargets",
				"saveTargetsAtomReply	xcb_intern_atom_reply_t*"
			],
			[
				"INT",
				"INT32_MAX	macro"
			],
			[
				"targets",
				"targetsAtomReply	xcb_intern_atom_reply_t*"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Makefile",
			"settings":
			{
				"buffer_size": 250,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/main.cpp",
			"settings":
			{
				"buffer_size": 499,
				"line_ending": "Unix"
			}
		},
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Logger/Logger.hpp",
			"settings":
			{
				"buffer_size": 214,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Logger/Logger.inl",
			"settings":
			{
				"buffer_size": 238,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/aster/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
			"settings":
			{
				"buffer_size": 284,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/aster/.config/sublime-text-3/Packages/SublimeClang/SublimeClang.sublime-settings",
			"settings":
			{
				"buffer_size": 14096,
				"line_ending": "Unix"
			}
		},
		{
			"file": "voxelator.sublime-project",
			"settings":
			{
				"buffer_size": 245,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 312.0,
		"selected_items":
		[
			[
				"clear",
				"SublimeClang: Clear cache"
			],
			[
				"clang",
				"SublimeClang: Clear cache"
			],
			[
				"cac",
				"SublimeLinter: Clear Caches"
			],
			[
				"cache",
				"SublimeClang: Clear cache"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"clea",
				"SublimeLinter: Clear Caches"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"Package Control: remo",
				"Package Control: Remove Package"
			],
			[
				"git log",
				"Git: Log All"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			]
		],
		"width": 467.0
	},
	"console":
	{
		"height": 303.0,
		"history":
		[
			"help",
			"reload",
			"plugin",
			"plugins",
			"view.reload()",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/aster/Programming/Graphics/Voxelator",
		"/home/aster/Programming/Graphics/Voxelator/src",
		"/home/aster/Programming/Graphics/Voxelator/src/Logger"
	],
	"file_history":
	[
		"/home/aster/Games/TrapQuest/Trap Quest 1502120001.glksave",
		"/home/aster/Programming/Graphics/imgui-backends/rendering/imconfig-rendering-SFML.h",
		"/home/aster/Programming/Graphics/imgui-backends/events/imgui-events-SFML.h",
		"/home/aster/Programming/Graphics/imgui-backends/rendering/imgui-rendering-SFML.h",
		"/home/aster/Programming/Graphics/imgui-backends/SFML/imconfig-SFML.h",
		"/home/aster/Programming/Graphics/imgui-backends/SFML/imgui-SFML.h",
		"/home/aster/Programming/bf.c",
		"/tmp/bf.c",
		"/tmp/output",
		"/tmp/out.txt",
		"/tmp/out",
		"/home/aster/.config/sublime-text-3/Packages/User/SublimeClang.sublime-settings",
		"/run/media/aster/Media/TV Shows/House (2004)/House MD Season 2/Tracked_by_Demonoid_com.txt",
		"/run/media/aster/Media/TV Shows/House (2004)/House MD Season 1/READ ME FOR AC3 FILTER HELP.txt",
		"/media/swapdisk/aster/SHIELD/Ubuntu/Linux_for_Tegra/apply_binaries.sh",
		"/home/aster/Downloads/noiselib-1.5.1/examples/tiled.py",
		"/home/aster/Downloads/noiselib-1.5.1/examples/simplex.py",
		"/home/aster/Downloads/noiselib-1.5.1/examples/complex.py",
		"/home/aster/Downloads/The.Fellowship.of.the.Ring.Extended.Editions.2001.anoXmous_eng.srt",
		"/home/aster/Downloads/The.Fellowship.of.the.Ring.2001.Extended.720p.BluRay.x264.anoXmous_eng.srt",
		"/home/aster/Downloads/The.Fellowship.of.the.Ring.2001.Extended.1080p.BluRay.x264.anoXmous_Elvish.srt",
		"/home/aster/Programming/Physics/Cloth/imgui/imgui_newSFML.h",
		"/home/aster/Programming/Physics/Cloth/test.cpp",
		"/home/aster/Programming/Physics/Cloth/testgl.cpp",
		"/home/aster/Programming/Physics/Cloth/imgui_test.cpp",
		"/home/aster/Programming/Physics/Cloth/imgui/imgui.cpp",
		"/home/aster/Programming/Physics/Cloth/imgui/imgui.h",
		"/home/aster/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/tmp/imgui_test.cpp",
		"/home/aster/Programming/Physics/Cloth/imgui.ini",
		"/tmp/bcmdhd-sys-conf",
		"/run/media/aster/Windows 8/Users/Aster/AppData/Roaming/HexChat/scrollback/BoxBox/#sfml.txt",
		"/tmp/shovel_boss.cpp",
		"/home/aster/.config/sublime-text-3/Packages/SublimeClang/SublimeClang.sublime-settings",
		"/home/aster/Programming/Physics/Cloth/config.hpp",
		"/home/aster/Programming/tmp/imgui/examples/opengl_example/main.cpp",
		"/home/aster/Programming/Physics/Cloth/cloth_multithreaded.cpp",
		"/run/media/aster/Media/Bitcoin/bitcoin.conf",
		"/run/media/aster/Media/Bitcoin/wallet.dat",
		"/tmp/pywallet/wallet.txt",
		"/usr/include/glm/gtc/noise.inl",
		"/home/aster/Downloads/sandpile/sandpile.c",
		"/home/aster/Programming/WebDev/freezing-happiness/application/main/templates/index.html",
		"/home/aster/Programming/Physics/Windtunnel/src/Wind/Engine/Partitioning/Grid.cpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Wind/Engine/Partitioning/EntityPartitionData.hpp",
		"/home/aster/Programming/Physics/Windtunnel/src/Wind/Engine/Partitioning/QuadTree.cpp",
		"/home/aster/Programming/Physics/Windtunnel/src/Wind/Engine/Engine/Engine.cpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Wind/Engine/Engine/Engine.hpp",
		"/home/aster/Programming/Physics/Windtunnel/src/Wind/Engine/Shape/CircleShape.cpp",
		"/home/aster/Programming/Physics/Windtunnel/src/Wind/Engine/Shape/RectangleShape.cpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Wind/Engine/Shape/RectangleShape.hpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Wind/Engine/Shape/Shape.hpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Wind/Engine/Partitioning/QuadTree.hpp",
		"/home/aster/Programming/Physics/Windtunnel/src/Wind/Engine/Integration/RK4.cpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Wind/Engine/Integration/RK4.hpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Wind/Engine/Entity/Entity.hpp",
		"/home/aster/Programming/Physics/Windtunnel/src/Wind/Engine/Integration/Euler.cpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Wind/Engine/Integration/Euler.hpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Wind/Engine/Partitioning/Grid.hpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Wind/Engine/Partitioning/Partitioning.hpp",
		"/home/aster/.config/sublime-text-3/Packages/SublimeLinter/SublimeLinter.sublime-settings",
		"/home/aster/.config/sublime-text-3/Packages/User/SublimeLinter.sublime-settings",
		"/tmp/test.cpp",
		"/home/aster/Programming/Physics/Windtunnel/examples/testbench/include/c++/4.9.1/ext/new_allocator.h",
		"/home/aster/Programming/Physics/Windtunnel/src/Wind/Engine/Engine/include/c++/4.9.1/bits/shared_ptr_base.h",
		"/home/aster/Programming/Physics/Windtunnel/examples/testbench/testbench.cpp",
		"/home/aster/Programming/Physics/Windtunnel/src/Wind/Engine/Entity/Entity.cpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Wind/Engine/Body/Body.hpp",
		"/home/aster/Programming/Physics/Windtunnel/src/Wind/Engine/Body/Body.cpp",
		"/home/aster/Programming/Physics/Windtunnel/src/Wind/Engine/Shape/Shape.cpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Wind/Engine/Shape/CircleShape.hpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Wind/Engine/AABB/AABB.hpp",
		"/home/aster/Programming/Physics/Windtunnel/src/Wind/Engine/AABB/AABB.cpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Wind/Engine/Integration/Integration.hpp",
		"/tmp/test_aabb.cpp",
		"/home/aster/Programming/Physics/Windtunnel/README.md",
		"/home/aster/Programming/Physics/Windtunnel/include/Wind/AABB/AABB.hpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Wind/Maths/Vector2.hpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Wind/Maths/Vector2/Vector2.inl",
		"/home/aster/Programming/Physics/Windtunnel/include/Wind/Maths/Vector2/Vector2.hpp",
		"/home/aster/Programming/Physics/Windtunnel/examples/CMakeLists.txt",
		"/home/aster/Programming/Physics/Windtunnel/examples/testbench/CMakeLists.txt",
		"/home/aster/Programming/Physics/Windtunnel/.gitignore",
		"/home/aster/Programming/Physics/Windtunnel/CMakeLists.txt",
		"/home/aster/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/home/aster/Programming/Physics/Windtunnel/include/Wind/Engine/Shape/Collisions.hpp",
		"/home/aster/Programming/Physics/Windtunnel/src/Wind/Engine/Shape/Collisions.cpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Windtunnel/Maths/Vector2/Vector2.hpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Windtunnel/Maths/Vector2.hpp",
		"/home/aster/Programming/Physics/Windtunnel/src/Windtunnel/Engine/Entity/Entity.cpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Windtunnel/Engine/Entity/Entity.hpp",
		"/home/aster/Programming/Physics/Windtunnel/src/Windtunnel/Engine/Engine/Engine.cpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Windtunnel/Engine/Engine/Engine.hpp",
		"/home/aster/Programming/Physics/Windtunnel/src/Windtunnel/main.cpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Windtunnel/Maths/Vector2/Vector2.inl",
		"/home/aster/Programming/Physics/Windtunnel/cmake/Modules/FindSFML.cmake",
		"/home/aster/.config/sublime-text-3/Packages/CMakeEditor/README.md",
		"/home/aster/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
		"/home/aster/Programming/Physics/Windtunnel/src/Windtunnel/include/c++/4.9.1/ext/new_allocator.h",
		"/home/aster/Programming/Physics/Windtunnel/include/Windtunnel/Maths/constants.hpp",
		"/home/aster/Programming/Physics/Windtunnel/include/Windtunnel/Engine/Entity/Interactions.hpp",
		"/usr/include/c++/4.9.1/cstddef",
		"/home/aster/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/aster/.config/sublime-text-3/Packages/SublimeClang/Default.sublime-keymap",
		"/usr/include/c++/4.9.1/x86_64-unknown-linux-gnu/bits/os_defines.h",
		"/usr/include/c++/4.9.1/cwchar",
		"/home/aster/EXERCISE.md",
		"/tmp/heroku/socket.io/socket.io.js",
		"/usr/include/xcb/xcb_bitops.h",
		"/home/aster/Programming/School/rEvolutionary/Iteration2/main.cpp",
		"/home/aster/Untitled.sav",
		"/home/aster/Programming/Contrib/SFML/src/SFML/Window/Android/WindowImplAndroid.cpp",
		"/home/aster/Programming/Contrib/SFML/src/SFML/Window/Android/InputImpl.cpp",
		"/home/aster/Programming/Contrib/SFML/src/SFML/Window/Android/InputImpl.hpp",
		"/home/aster/Programming/Contrib/SFML/src/SFML/Window/Android/SensorImpl.cpp",
		"/home/aster/Programming/Contrib/SFML/src/SFML/Window/Android/SensorImpl.hpp",
		"/home/aster/Programming/Contrib/SFML/src/SFML/Window/Android/VideoModeImpl.cpp",
		"/home/aster/Programming/Contrib/SFML/src/SFML/Window/EGLCheck.cpp",
		"/home/aster/Programming/Contrib/SFML/src/SFML/Window/EglContext.cpp",
		"/home/aster/Programming/Android/android-ndk-r10b/platforms/android-19/arch-arm/usr/include/jni.h",
		"/home/aster/Programming/Contrib/SFML/src/SFML/System/Android/Activity.cpp",
		"/home/aster/Programming/Contrib/SFML/src/SFML/Window/Android/WindowImplAndroid.hpp",
		"/usr/include/xcb/xcb_aux.h",
		"/usr/include/xcb/xcb_util.h",
		"/home/aster/Programming/Contrib/SFML/src/SFML/Window/JoystickManager.cpp",
		"/usr/include/X11/Xatom.h",
		"/home/aster/Programming/Contrib/SFML/src/SFML/Window/Unix/WindowImplX11.cpp",
		"/home/aster/Programming/Contrib/SFML/src/SFML/Window/Win32/WindowImplWin32.cpp"
	],
	"find":
	{
		"height": 21.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"for(auto &v : grid",
			"starti",
			"464f",
			"cout",
			"printf",
			"//",
			"printf",
			"//",
			"printf",
			"*p)",
			"i=",
			"l",
			"s",
			"p",
			"d",
			"sp",
			"ip",
			"sp",
			"in",
			"Signal.",
			"(ceiling ((toFloat n)/(toFloat i)))",
			"v.x",
			"+=",
			"+",
			".g.",
			"front",
			"100",
			"0",
			"vtx_buffer[0]",
			"Cmd",
			"ImDrawList",
			"//*fontTex.getSize().",
			"vtx_",
			"pos",
			"position",
			"ImConvert",
			"col",
			"->col",
			".col",
			"ImDrawLi",
			"#endif",
			"#ifdef USE_IMGUI",
			"uv",
			"ImDrawList",
			"((cmd_list",
			"color",
			"Color",
			"ImDrawList",
			"color",
			";\\\n",
			"IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT",
			"ImDrawList",
			"ImImpl",
			"grd_sz",
			"null",
			"Float",
			"define",
			"0.1",
			"+1.f",
			"*5.f;",
			"9",
			"2.f",
			"*10",
			"/2.f;",
			"constexpr ",
			"//*constraint_resistance;",
			"grid[i].v",
			"x",
			"grid[i].v.x=grid[i].v.x*0.1*dt;",
			"(grvt_x*grid[i].mass)",
			"constraints[i]->nodes[0]->v.x+=px*phys_dt;\n					constraints[i]->nodes[0]->v.y+=py*phys_dt;\n					constraints[i]->nodes[1]->v.x-=px*phys_dt;\n					constraints[i]->nodes[1]->v.y-=py*phys_dt;",
			"*phys_dt",
			"x",
			"n.",
			"x",
			"grd_sz_x*grd_sz_y",
			"(grd_sz_x)",
			"2*((y*(grd_sz_x))+x)",
			"(y*grd_sz_x)+x+cnstrnts_sz/2",
			"(y*(grd_sz_x-1))+x",
			"push_back",
			"grd_sz_x-1",
			"constraints[i]->",
			"constraints.back()->",
			"constraints[]",
			"constraints.",
			"OpenGL",
			"constraints[(y*grd_sz_x)+x",
			"x*y",
			"constraints[i]->",
			"constraints.back()",
			"constraints.back()->",
			"constraints.back()",
			"50",
			"float",
			",constraints[i]->nodes[1]->p.y},",
			"{150,150,150}",
			"const ",
			"const",
			"fixed",
			"false",
			"Simplex",
			"pow",
			"128.f",
			"\"",
			"(*it_b)",
			"(*it_a)",
			"x",
			"draw_particles",
			"//border ",
			"10",
			"256",
			"128",
			"ra",
			"ra->get_AABB()",
			"m_partition->get_bounds()",
			"gravi",
			"const ",
			";\n",
			"shared_ptr",
			"get_entities",
			"entities",
			"entity->get_body()->get_shapes()[0]->get_AABB(entity->position)",
			"QuadTree",
			"256",
			"300",
			"512",
			"128"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 6,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 250,
						"regions":
						{
						},
						"selection":
						[
							[
								111,
								111
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 499,
						"regions":
						{
						},
						"selection":
						[
							[
								402,
								402
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"default_dir": "/home/aster/Programming/Graphics/Voxelator/src/Logger",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/Logger/Logger.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 214,
						"regions":
						{
						},
						"selection":
						[
							[
								12,
								12
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/Logger/Logger.inl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 238,
						"regions":
						{
						},
						"selection":
						[
							[
								238,
								238
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/home/aster/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 284,
						"regions":
						{
						},
						"selection":
						[
							[
								284,
								284
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/aster/.config/sublime-text-3/Packages/SublimeClang/SublimeClang.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14096,
						"regions":
						{
						},
						"selection":
						[
							[
								13763,
								13763
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2972.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "voxelator.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 245,
						"regions":
						{
						},
						"selection":
						[
							[
								119,
								119
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 19.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.clang":
	{
		"height": 235.0
	},
	"output.clang_static_analyzer":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 88.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 100.0
	},
	"project": "voxelator.sublime-project",
	"replace":
	{
		"height": 38.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"selected_items":
		[
		],
		"width": 557.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 241.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
